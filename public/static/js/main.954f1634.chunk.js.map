{"version":3,"sources":["sounds/metronome1.flac","components/BufferLoader.js","components/metronomeUtil.js","components/Metronome.jsx","components/Drone.js","components/ToneGenerator.jsx","components/PracticeStack.jsx","components/AutoGnome.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","BufferLoader","context","urlList","callback","this","onload","bufferList","Array","loadCount","prototype","loadBuffer","url","index","request","XMLHttpRequest","open","responseType","loader","decodeAudioData","response","buffer","length","alert","error","console","onerror","send","load","i","window","AudioContext","webkitAudioContext","setIntervalCancel","finishedLoading","Sound","a","async","undefined","metronomeClick","ended","queue","play","tempo","goal","incrementBy","incrementEvery","timeContext","rawTempo","calculatedTempo","currentTime","incrementCompletion","setInterval","shift","source","createBufferSource","connect","destination","onended","start","push","cancel","node","clearInterval","stop","Metronome","props","state","autoPlay","hidden","howLong","setState","Number","newGoalTempo","newIncrement","newIncrementEvery","stopMetronome","log","passedProp","className","type","value","onChange","e","changeTempo","target","changeGoal","changeIncrementBy","changeIncrementEvery","changeHowLong","onClick","addToPracticeStack","incrementBy10","decrementBy10","React","Component","pitches","sounds","ToneGenerator","useState","pitch","setPitch","isPlaying","setIsPlaying","startSound","freq","oscillator","createOscillator","gain","createGain","frequency","makeSound","cancelSound","sound","stopSound","pitchName","min","max","changePitch","PracticeStack","practiceStack","isArray","map","block","runGnomes","cancelGnomeAndAdvance","delay","slice","AutoGnome","App","bind","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.954f1634.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/metronome1.fd742d0f.flac\";","const BufferLoader = function(context, urlList, callback) {\n  this.context = context;\n  this.urlList = urlList;\n  this.onload = callback;\n  this.bufferList = new Array();\n  this.loadCount = 0;\n};\n\nBufferLoader.prototype.loadBuffer = function(url, index) {\n  // Load buffer asynchronously\n  var request = new XMLHttpRequest();\n  request.open('GET', url, true);\n  request.responseType = 'arraybuffer';\n\n  var loader = this;\n\n  request.onload = function() {\n    // Asynchronously decode the audio file data in request.response\n    loader.context.decodeAudioData(\n      request.response,\n      function(buffer) {\n        if (!buffer) {\n          alert('error decoding file data: ' + url);\n          return;\n        }\n        loader.bufferList[index] = buffer;\n        if (++loader.loadCount === loader.urlList.length)\n          loader.onload(loader.bufferList);\n      },\n      function(error) {\n        console.error('decodeAudioData error', error);\n      }\n    );\n  };\n\n  request.onerror = function() {\n    alert('BufferLoader: XHR error');\n  };\n\n  request.send();\n};\n\nBufferLoader.prototype.load = function() {\n  for (var i = 0; i < this.urlList.length; ++i)\n    this.loadBuffer(this.urlList[i], i);\n};\n\nexport default BufferLoader;\n","import metronomeClick from '../sounds/metronome1.flac';\nimport BufferLoader from './BufferLoader.js';\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nconst context = new AudioContext();\nlet buffer;\n\nconst finishedLoading = bufferList => {\n  buffer = bufferList[0];\n};\n\nconst Sound = async () => {\n  if (buffer === undefined) {\n    let bufferLoader = new BufferLoader(\n      context,\n      [metronomeClick],\n      finishedLoading\n    );\n    bufferLoader.load();\n  }\n};\n\nlet ended = 0;\nlet queue = [];\nlet setIntervalCancel;\nlet lengthOfBeats = [];\n\nconst play = (tempo, goal, incrementBy, incrementEvery) => {\n  let timeContext = new AudioContext();\n  let rawTempo = tempo;\n  let calculatedTempo = 60 / rawTempo;\n  // default to 20minutes\n\n  let currentTime = timeContext.currentTime + 0.2;\n  let incrementCompletion = 0;\n  setIntervalCancel = setInterval(() => {\n    // clear out old gnomes from queue to save memory\n    for (let i = 0; i < ended; i++) {\n      queue.shift();\n    }\n    ended = 0;\n\n    if (queue.length < 21) {\n      for (let i = 1; i < 21; i++) {\n        // update tempo if incrementing\n        if (incrementBy && incrementEvery && rawTempo < goal) {\n          if (incrementCompletion > incrementEvery) {\n            incrementCompletion = 0;\n            rawTempo += incrementBy;\n            if (rawTempo > goal) {\n              rawTempo = goal;\n            }\n            calculatedTempo = 60 / rawTempo;\n          }\n        }\n\n        // generate audio and push to queue\n        let source = timeContext.createBufferSource();\n        source.buffer = buffer;\n        source.connect(timeContext.destination);\n        source.onended = () => {\n          // console.log('playing');\n          ended += 1;\n        };\n\n        // gotta push the clock ahead so that it doesn't just duplicate events\n        incrementCompletion += calculatedTempo;\n        // console.log('written up to', currentTime + calculatedTempo);\n        source.start(currentTime + calculatedTempo);\n        queue.push(source);\n        currentTime += calculatedTempo;\n      }\n    }\n  }, 200);\n};\n\nconst cancel = () => {\n  clearInterval(setIntervalCancel);\n  for (let node in queue) {\n    queue[node].stop();\n  }\n};\n\nexport { Sound, play, cancel };\n","import React, { useEffect, useState } from 'react';\nimport metronomeClick from '../sounds/metronome1.flac';\nimport { Sound, play, cancel } from './metronomeUtil.js';\n\nclass Metronome extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tempo: this.props.tempo || 60,\n      autoPlay: this.props.autoPlay || false,\n      goal: this.props.goal || 60,\n      incrementBy: this.props.incrementBy || 0,\n      incrementEvery: this.props.incrementEvery || 0,\n      hidden: this.props.hidden || false,\n      howLong: this.props.howLong || 10\n    };\n  }\n\n  changeTempo(tempo) {\n    if (tempo === '') {\n      this.setState({ tempo: 0 });\n    }\n    if (Number(tempo)) {\n      this.setState({ tempo: tempo });\n    }\n  }\n  changeGoal(newGoalTempo) {\n    if (newGoalTempo === '') {\n      this.setState({ goal: 0 });\n    } else {\n      this.setState({ goal: newGoalTempo });\n    }\n  }\n  changeIncrementBy(newIncrement) {\n    if (newIncrement === '') {\n      this.setState({ incrementBy: 0 });\n    } else {\n      this.setState({ incrementBy: newIncrement });\n    }\n  }\n  changeIncrementEvery(newIncrementEvery) {\n    if (newIncrementEvery === '') {\n      this.setState({ incrementEvery: 0 });\n    } else {\n      this.setState({ incrementEvery: newIncrementEvery });\n    }\n  }\n  changeHowLong(howLong) {\n    if (howLong === '') {\n      this.setState({ howLong: 0 });\n    } else {\n      this.setState({ howLong: howLong });\n    }\n  }\n\n  start() {\n    let { tempo, goal, incrementBy, incrementEvery } = this.state;\n    play(\n      Number(tempo),\n      Number(goal),\n      Number(incrementBy),\n      Number(incrementEvery)\n    );\n  }\n  stopMetronome() {\n    cancel();\n  }\n  incrementBy10() {\n    this.stopMetronome();\n    this.setState({ tempo: this.state.tempo + 10 });\n    this.start();\n  }\n  decrementBy10() {\n    this.stopMetronome();\n    this.setState({ tempo: this.state.tempo - 10 });\n    this.start();\n  }\n\n  async componentDidMount() {\n    Sound();\n    if (this.state.autoPlay) {\n      this.start();\n    }\n    console.log(this.props.passedProp);\n  }\n\n  render() {\n    if (!this.state.hidden) {\n      return (\n        <div className=\"module\">\n          <div className=\"background\">\n            <h2>Metronome</h2>\n            <ul className=\"moduleContents\">\n              <div className=\"moduleElement\">\n                Starting Tempo:\n                <input\n                  type=\"text\"\n                  value={this.state.tempo}\n                  onChange={e => {\n                    this.changeTempo(e.target.value);\n                  }}\n                ></input>\n              </div>\n              <div className=\"moduleElement\">\n                Goal Tempo:\n                <input\n                  type=\"text\"\n                  value={this.state.goal}\n                  onChange={e => {\n                    this.changeGoal(e.target.value);\n                  }}\n                ></input>\n              </div>\n              <div className=\"moduleElement\">\n                Increment by\n                <input\n                  type=\"text\"\n                  value={this.state.incrementBy}\n                  onChange={e => {\n                    this.changeIncrementBy(e.target.value);\n                  }}\n                ></input>\n              </div>\n              <div className=\"moduleElement\">\n                Every\n                <input\n                  type=\"text\"\n                  value={this.state.incrementEvery}\n                  onChange={e => {\n                    this.changeIncrementEvery(e.target.value);\n                  }}\n                ></input>\n              </div>\n              <div className=\"moduleElement\">\n                HowLong?\n                <input\n                  type=\"text\"\n                  value={this.state.howLong}\n                  onChange={e => {\n                    this.changeHowLong(e.target.value);\n                  }}\n                ></input>\n              </div>\n            </ul>\n            <ul>\n              <div className=\"moduleElement\">\n                <button\n                  className=\"moduleButton\"\n                  onClick={() =>\n                    this.props.addToPracticeStack(\n                      this.state.tempo,\n                      this.state.goal,\n                      this.state.incrementBy,\n                      this.state.incrementEvery,\n                      this.state.howLong\n                    )\n                  }\n                >\n                  Save\n                </button>\n              </div>\n              <div className=\"moduleElement\">\n                <button\n                  className=\"moduleButton\"\n                  onClick={() => this.incrementBy10()}\n                >\n                  +10bpm\n                </button>\n              </div>\n              <div className=\"moduleElement\">\n                <button\n                  className=\"moduleButton\"\n                  onClick={() => this.decrementBy10()}\n                >\n                  -10bpm\n                </button>\n              </div>\n              <button\n                className=\"playMetronome\"\n                onClick={() => this.start(this.state.tempo)}\n              >\n                Play\n              </button>\n              <button\n                className=\"stopMetronome\"\n                onClick={() => this.stopMetronome()}\n              >\n                Stop\n              </button>\n            </ul>\n          </div>\n        </div>\n      );\n    } else {\n      return <></>;\n    }\n  }\n}\n\nexport default Metronome;\n","window.AudioContext = window.AudioContext || window.webkitAudioContext;\nconst context = new AudioContext();\nlet pitches = [\n  440,\n  466.16,\n  493.88,\n  523.25,\n  554.37,\n  587.33,\n  622.25,\n  659.25,\n  698.46,\n  739.99,\n  793.99,\n  830.61\n];\n\nlet sounds = [];\nconst makeSound = pitch => {\n  let freq = pitches[pitch - 1];\n  console.log(freq);\n  if (!sounds[0]) {\n    let oscillator = context.createOscillator();\n    let gain = context.createGain();\n\n    sounds.push(oscillator);\n    sounds.push(gain);\n\n    oscillator.type = 'sine';\n\n    oscillator.frequency.value = freq;\n\n    oscillator.connect(gain);\n    gain.connect(context.destination);\n\n    // gain.start();\n    oscillator.start();\n\n    console.log(oscillator);\n    return pitch;\n  }\n};\n\nconst stopSound = () => {\n  console.log(sounds);\n  for (let sound in sounds) {\n    if (sound % 2 === 0) {\n      sounds[sound].stop();\n    }\n  }\n  sounds = [];\n\n  console.log('stopSound');\n};\nexport { makeSound, stopSound };\n","import React, { useState, useEffect } from 'react';\nimport './ToneGenerator.css';\nimport { makeSound, stopSound } from './Drone.js';\n\nconst ToneGenerator = () => {\n  const [pitch, setPitch] = useState(1);\n  let [isPlaying, setIsPlaying] = useState(false);\n  // useEffect(() => {}, [pitch]);\n\n  const changePitch = pitch => {\n    setPitch(pitch);\n    if (isPlaying) {\n      cancelSound();\n      startSound(pitch);\n    }\n  };\n  const startSound = pitch => {\n    makeSound(pitch);\n    setIsPlaying(true);\n  };\n  const cancelSound = () => {\n    stopSound();\n    setIsPlaying(false);\n  };\n\n  let pitchName = pitch => {\n    let names = [\n      'A',\n      'Bb',\n      'B',\n      'C',\n      'C#',\n      'D',\n      'D#',\n      'E',\n      'F',\n      'F#',\n      'G',\n      'G#'\n    ];\n    return names[pitch - 1];\n  };\n\n  return (\n    <div className=\"module\">\n      <div className=\"background\">\n        <h1>Drone Generator</h1>\n        <h2>Pitch: {pitchName(pitch)}</h2>\n        <ul className=\"moduleContents\">\n          <div className=\"moduleElement\">\n            <input\n              className=\"pitchSlider\"\n              type=\"range\"\n              min=\"1\"\n              max=\"12\"\n              value={pitch}\n              onChange={e => changePitch(e.target.value)}\n            ></input>\n          </div>\n          <div className=\"moduleElement\">\n            <button\n              className=\"moduleButton\"\n              onClick={() => {\n                startSound(pitch);\n              }}\n            >\n              Start\n            </button>\n          </div>\n          <div className=\"moduleElement\">\n            <button className=\"moduleButton\" onClick={() => cancelSound()}>\n              Stop\n            </button>\n          </div>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default ToneGenerator;\n","import React, { useState, useEffect } from 'react';\n\nconst PracticeStack = ({ practiceStack }) => {\n  console.log(Array.isArray(practiceStack));\n  return (\n    <>\n      {practiceStack.length > 0 ? (\n        practiceStack.map(block => {\n          return (\n            <div className=\"practiceStack\">\n              Tempo:{block.tempo} {'\\n'}\n              Goal:{block.goal} {'\\n'}\n              incrementBy:{block.incrementBy} {'\\n'}\n              incrementEvery:{block.incrementEvery} {'\\n'}\n            </div>\n          );\n        })\n      ) : (\n        <></>\n      )}\n    </>\n  );\n};\n\nexport default PracticeStack;\n","import React, { useState } from 'react';\nimport { Sound, play, cancel } from './metronomeUtil.js';\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst timeContext = new AudioContext();\nSound();\nlet gnomes = [];\n\nconst runGnomes = practiceStack => {\n  console.log(practiceStack[0]);\n  if (Array.isArray(practiceStack) && practiceStack.length > 0) {\n    console.log(practiceStack);\n    const { tempo, goal, incrementBy, incrementEvery } = practiceStack[0];\n    let currentTime = timeContext.currentTime + 0.2;\n    let source = timeContext.createOscillator();\n    let gain = timeContext.createGain();\n    gain.gain.value = 0;\n    source.connect(gain);\n    gain.connect(timeContext.destination);\n    gain.gain.value = 0.01;\n    console.log(source);\n\n    source.onended = () => {\n      play(tempo, goal, incrementBy, incrementEvery);\n      cancelGnomeAndAdvance(practiceStack, practiceStack[0].howLong);\n    };\n    source.start(currentTime);\n    console.log(source);\n    source.stop(currentTime + 0.1);\n  }\n};\nconst cancelGnomeAndAdvance = (practiceStack, delay) => {\n  if (practiceStack.length >= 1) {\n    let currentTime = timeContext.currentTime + 0.2;\n    let source = timeContext.createOscillator();\n    let gain = timeContext.createGain();\n    gain.gain.value = 0;\n    source.connect(gain);\n    gain.connect(timeContext.destination);\n    console.log('ON END ');\n    source.onended = () => {\n      console.log('here');\n      cancel();\n      runGnomes(practiceStack.slice(1));\n    };\n    source.start();\n    source.stop(delay);\n  }\n};\n\nconst AutoGnome = ({ practiceStack }) => {\n  return (\n    <div>\n      <button className=\"runGnomes\" onClick={() => runGnomes(practiceStack)}>\n        Run Gnomes\n      </button>\n      <button className=\"stopGnomes\" onClick={() => cancel()}>\n        STOP\n      </button>\n    </div>\n  );\n};\n\nexport default AutoGnome;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Metronome from './components/Metronome.jsx';\nimport ToneGenerator from './components/ToneGenerator.jsx';\nimport PracticeStack from './components/PracticeStack.jsx';\nimport AutoGnome from './components/AutoGnome.jsx';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      practiceStack: []\n    };\n    this.addToPracticeStack = this.addToPracticeStack.bind(this);\n  }\n\n  addToPracticeStack(tempo, goal, incrementBy, incrementEvery, howLong) {\n    this.state.practiceStack.push({\n      tempo,\n      goal,\n      incrementBy,\n      incrementEvery,\n      howLong\n    });\n    this.setState({ practiceStack: this.state.practiceStack });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"header\">Practical.ly</h1>\n        {/* <nav>\n          <ul>\n            <div className=\"navElement\">Home</div>\n            <div className=\"navElement\">My Schedule</div>\n            <div className=\"navElement\">Other</div>\n          </ul>\n        </nav> */}\n        <div className=\"main\">\n          <PracticeStack\n            className=\"practiceStackContainer\"\n            practiceStack={this.state.practiceStack}\n          />\n\n          <div className=\"moduleContainer\">\n            <Metronome\n              addToPracticeStack={this.addToPracticeStack}\n              tempo={80}\n              // autoPlay={true}\n              goal={100}\n              incrementBy={5}\n              incrementEvery={10}\n            />\n\n            <ToneGenerator />\n            <AutoGnome practiceStack={this.state.practiceStack} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}