{"version":3,"sources":["sounds/metronome1.flac","components/BufferLoader.js","components/Sound.js","components/Metronome.jsx","components/Drone.js","components/ToneGenerator.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","BufferLoader","context","urlList","callback","this","onload","bufferList","Array","loadCount","prototype","loadBuffer","url","index","request","XMLHttpRequest","open","responseType","loader","decodeAudioData","response","buffer","length","alert","error","console","onerror","send","load","i","window","AudioContext","webkitAudioContext","setIntervalCancel","finishedLoading","Sound","a","async","undefined","metronomeClick","ended","queue","Metronome","props","state","tempo","playing","goal","incrementBy","incrementEvery","setState","Number","newGoalTempo","newIncrement","newIncrementEvery","timeContext","rawTempo","calculatedTempo","currentTime","incrementCompletion","setInterval","log","shift","source","createBufferSource","connect","destination","onended","start","push","play","node","clearInterval","stop","cancel","stopMetronome","className","type","value","onChange","e","changeTempo","target","changeGoal","changeIncrementBy","changeIncrementEvery","onClick","incrementBy10","decrementBy10","React","Component","pitches","sounds","ToneGenerator","useState","pitch","setPitch","isPlaying","setIsPlaying","startSound","freq","oscillator","createOscillator","gain","createGain","frequency","makeSound","cancelSound","sound","stopSound","pitchName","min","max","changePitch","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.adab5e4a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/metronome1.fd742d0f.flac\";","const BufferLoader = function(context, urlList, callback) {\n  this.context = context;\n  this.urlList = urlList;\n  this.onload = callback;\n  this.bufferList = new Array();\n  this.loadCount = 0;\n};\n\nBufferLoader.prototype.loadBuffer = function(url, index) {\n  // Load buffer asynchronously\n  var request = new XMLHttpRequest();\n  request.open('GET', url, true);\n  request.responseType = 'arraybuffer';\n\n  var loader = this;\n\n  request.onload = function() {\n    // Asynchronously decode the audio file data in request.response\n    loader.context.decodeAudioData(\n      request.response,\n      function(buffer) {\n        if (!buffer) {\n          alert('error decoding file data: ' + url);\n          return;\n        }\n        loader.bufferList[index] = buffer;\n        if (++loader.loadCount === loader.urlList.length)\n          loader.onload(loader.bufferList);\n      },\n      function(error) {\n        console.error('decodeAudioData error', error);\n      }\n    );\n  };\n\n  request.onerror = function() {\n    alert('BufferLoader: XHR error');\n  };\n\n  request.send();\n};\n\nBufferLoader.prototype.load = function() {\n  for (var i = 0; i < this.urlList.length; ++i)\n    this.loadBuffer(this.urlList[i], i);\n};\n\nexport default BufferLoader;\n","import metronomeClick from '../sounds/metronome1.flac';\nimport BufferLoader from './BufferLoader.js';\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nconst context = new AudioContext();\nlet buffer;\n\nconst finishedLoading = bufferList => {\n  buffer = bufferList[0];\n};\n\nconst Sound = async (numOfReps = 1) => {\n  if (buffer === undefined) {\n    let bufferLoader = new BufferLoader(\n      context,\n      [metronomeClick],\n      finishedLoading\n    );\n    bufferLoader.load();\n  }\n};\n\nlet ended = 0;\nlet queue = [];\nlet setIntervalCancel;\nlet lengthOfBeats = [];\n\nconst play = (tempo, goal, incrementBy, incrementEvery) => {\n  let timeContext = new AudioContext();\n  let rawTempo = tempo;\n  let calculatedTempo = 60 / rawTempo;\n  // default to 20minutes\n\n  let currentTime = timeContext.currentTime + 0.2;\n  let incrementCompletion = 0;\n  setIntervalCancel = setInterval(() => {\n    console.log('QUEUE LEN', queue.length);\n    // clear out old gnomes from queue to save memory\n    for (let i = 0; i < ended; i++) {\n      queue.shift();\n    }\n    ended = 0;\n    // console.log('QUEUE LEN:', queue.length);\n\n    if (queue.length < 21) {\n      for (let i = 1; i < 21; i++) {\n        // console.log('RAWTEMPO', rawTempo);\n        // console.log('calculated tempo:', calculatedTempo);\n        // update tempo if incrementing\n        if (incrementBy && incrementEvery && rawTempo < goal) {\n          if (incrementCompletion > incrementEvery) {\n            incrementCompletion = 0;\n            rawTempo += incrementBy;\n            if (rawTempo > goal) {\n              rawTempo = goal;\n            }\n            calculatedTempo = 60 / rawTempo;\n            console.log('INCREMENTING. NEW TEMPO:', calculatedTempo);\n          }\n        }\n        // generate audio and push to queue\n        // let context = new AudioContext();\n        let source = timeContext.createBufferSource();\n        source.buffer = buffer;\n        source.connect(timeContext.destination);\n        source.onended = () => {\n          console.log('playing');\n          ended += 1;\n        };\n\n        incrementCompletion += calculatedTempo;\n        console.log('written up to', currentTime + calculatedTempo);\n        source.start(currentTime + calculatedTempo);\n        queue.push(source);\n        currentTime += calculatedTempo;\n        // lengthOfBeats.push(calculatedTempo);\n      }\n      // gotta push the clock ahead so that it doesn't just duplicate events\n      // let extraTime = lengthOfBeats.reduce((acc, curr) => {\n      //   return acc + curr;\n      // });\n      // console.log('Extra time', extraTime);\n      // currentTime += extraTime;\n\n      // console.log('IN QUEUE', queue.length);\n    }\n  }, 200);\n};\n\nconst cancel = () => {\n  clearInterval(setIntervalCancel);\n  for (let node in queue) {\n    queue[node].stop();\n  }\n  // console.log(queue);\n};\n\nexport { Sound, play, cancel };\n","import React, { useEffect, useState } from 'react';\nimport metronomeClick from '../sounds/metronome1.flac';\nimport { Sound, play, cancel } from './Sound';\n\nclass Metronome extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tempo: 60,\n      playing: false,\n      goal: 60,\n      incrementBy: 0,\n      incrementEvery: 0\n    };\n  }\n\n  changeTempo(tempo) {\n    if (tempo === '') {\n      this.setState({ tempo: 0 });\n    }\n    if (Number(tempo)) {\n      this.setState({ tempo: tempo });\n    }\n  }\n  changePlaying() {\n    this.setState({ playing: !this.state.playing });\n  }\n  changeGoal(newGoalTempo) {\n    if (newGoalTempo === '') {\n      this.setState({ goal: 0 });\n    } else {\n      this.setState({ goal: newGoalTempo });\n    }\n  }\n  changeIncrementBy(newIncrement) {\n    if (newIncrement === '') {\n      this.setState({ incrementBy: 0 });\n    } else {\n      this.setState({ incrementBy: newIncrement });\n    }\n  }\n  changeIncrementEvery(newIncrementEvery) {\n    if (newIncrementEvery === '') {\n      this.setState({ incrementEvery: 0 });\n    } else {\n      this.setState({ incrementEvery: newIncrementEvery });\n    }\n  }\n\n  start() {\n    let { tempo, goal, incrementBy, incrementEvery } = this.state;\n    play(\n      Number(tempo),\n      Number(goal),\n      Number(incrementBy),\n      Number(incrementEvery)\n    );\n  }\n  stopMetronome() {\n    cancel();\n  }\n  incrementBy10() {\n    this.stopMetronome();\n    this.setState({ tempo: this.state.tempo + 10 });\n    this.start();\n  }\n  decrementBy10() {\n    this.stopMetronome();\n    this.setState({ tempo: this.state.tempo - 10 });\n    this.start();\n  }\n\n  async componentDidMount() {\n    Sound();\n  }\n\n  render() {\n    return (\n      <div className=\"module\">\n        <div className=\"background\">\n          <h2>Metronome</h2>\n          <ul className=\"moduleContents\">\n            <div className=\"moduleElement\">\n              Starting Tempo:\n              <input\n                type=\"text\"\n                value={this.state.tempo}\n                onChange={e => {\n                  this.changeTempo(e.target.value);\n                }}\n              ></input>\n            </div>\n            <div className=\"moduleElement\">\n              Goal Tempo:\n              <input\n                type=\"text\"\n                value={this.state.goal}\n                onChange={e => {\n                  this.changeGoal(e.target.value);\n                }}\n              ></input>\n            </div>\n            <div className=\"moduleElement\">\n              Increment by\n              <input\n                type=\"text\"\n                value={this.state.incrementBy}\n                onChange={e => {\n                  this.changeIncrementBy(e.target.value);\n                }}\n              ></input>\n            </div>\n            <div className=\"moduleElement\">\n              Every\n              <input\n                type=\"text\"\n                value={this.state.incrementEvery}\n                onChange={e => {\n                  this.changeIncrementEvery(e.target.value);\n                }}\n              ></input>\n            </div>\n          </ul>\n          <ul>\n            <div className=\"moduleElement\">\n              <button\n                className=\"moduleButton\"\n                onClick={() => this.incrementBy10()}\n              >\n                +10bpm\n              </button>\n            </div>\n            <div className=\"moduleElement\">\n              <button\n                className=\"moduleButton\"\n                onClick={() => this.decrementBy10()}\n              >\n                -10bpm\n              </button>\n            </div>\n            <button\n              className=\"playMetronome\"\n              onClick={() => this.start(this.state.tempo)}\n            >\n              Play\n            </button>\n            <button\n              className=\"stopMetronome\"\n              onClick={() => this.stopMetronome()}\n            >\n              Stop\n            </button>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Metronome;\n","window.AudioContext = window.AudioContext || window.webkitAudioContext;\nconst context = new AudioContext();\nlet pitches = [\n  440,\n  466.16,\n  493.88,\n  523.25,\n  554.37,\n  587.33,\n  622.25,\n  659.25,\n  698.46,\n  739.99,\n  793.99,\n  830.61\n];\n\nlet sounds = [];\nconst makeSound = pitch => {\n  let freq = pitches[pitch - 1];\n  console.log(freq);\n  if (!sounds[0]) {\n    let oscillator = context.createOscillator();\n    let gain = context.createGain();\n\n    sounds.push(oscillator);\n    sounds.push(gain);\n\n    oscillator.type = 'sine';\n\n    oscillator.frequency.value = freq;\n\n    oscillator.connect(gain);\n    gain.connect(context.destination);\n\n    // gain.start();\n    oscillator.start();\n\n    console.log(oscillator);\n    return pitch;\n  }\n};\n\nconst stopSound = () => {\n  console.log(sounds);\n  for (let sound in sounds) {\n    if (sound % 2 === 0) {\n      sounds[sound].stop();\n    }\n  }\n  sounds = [];\n\n  console.log('stopSound');\n};\nexport { makeSound, stopSound };\n","import React, { useState, useEffect } from 'react';\nimport './ToneGenerator.css';\nimport { makeSound, stopSound } from './Drone.js';\n\nconst ToneGenerator = () => {\n  const [pitch, setPitch] = useState(1);\n  let [isPlaying, setIsPlaying] = useState(false);\n  // useEffect(() => {}, [pitch]);\n\n  const changePitch = pitch => {\n    setPitch(pitch);\n    if (isPlaying) {\n      cancelSound();\n      startSound(pitch);\n    }\n  };\n  const startSound = pitch => {\n    makeSound(pitch);\n    setIsPlaying(true);\n  };\n  const cancelSound = () => {\n    stopSound();\n    setIsPlaying(false);\n  };\n\n  let pitchName = pitch => {\n    let names = [\n      'A',\n      'Bb',\n      'B',\n      'C',\n      'C#',\n      'D',\n      'D#',\n      'E',\n      'F',\n      'F#',\n      'G',\n      'G#'\n    ];\n    return names[pitch - 1];\n  };\n\n  return (\n    <div className=\"module\">\n      <div className=\"background\">\n        <h1>Drone Generator</h1>\n        <h2>Pitch: {pitchName(pitch)}</h2>\n        <ul className=\"moduleContents\">\n          <div className=\"moduleElement\">\n            <input\n              className=\"pitchSlider\"\n              type=\"range\"\n              min=\"1\"\n              max=\"12\"\n              value={pitch}\n              onChange={e => changePitch(e.target.value)}\n            ></input>\n          </div>\n          <div className=\"moduleElement\">\n            <button\n              className=\"moduleButton\"\n              onClick={() => {\n                startSound(pitch);\n              }}\n            >\n              Start\n            </button>\n          </div>\n          <div className=\"moduleElement\">\n            <button className=\"moduleButton\" onClick={() => cancelSound()}>\n              Stop\n            </button>\n          </div>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default ToneGenerator;\n","import React from 'react';\nimport './App.css';\nimport Metronome from './components/Metronome.jsx';\nimport ToneGenerator from './components/ToneGenerator.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"header\">Practical.ly</h1>\n      {/* <nav>\n        <ul>\n          <div className=\"navElement\">Home</div>\n          <div className=\"navElement\">My Schedule</div>\n          <div className=\"navElement\">Other</div>\n        </ul>\n      </nav> */}\n      <div className=\"main\">\n        {/* <div className=\"practiceStackContainer\">\n          stack container\n          <div className=\"practiceStackElement\">\n            Element 1\\nisjadijspdijpaisj\n          </div>\n          <div className=\"practiceStackElement\">Element 2</div>\n          <div className=\"practiceStackElement\">Element 3</div>\n        </div> */}\n        <div className=\"moduleContainer\">\n          <Metronome />\n\n          <ToneGenerator />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}