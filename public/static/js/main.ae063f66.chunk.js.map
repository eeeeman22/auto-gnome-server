{"version":3,"sources":["sounds/metronome1.flac","components/BufferLoader.js","components/metronomeUtil.js","components/Metronome.jsx","components/Drone.js","components/ToneGenerator.jsx","App.jsx","components/AutoGnome.jsx","index.js"],"names":["module","exports","BufferLoader","context","urlList","callback","this","onload","bufferList","loadCount","prototype","loadBuffer","url","index","request","XMLHttpRequest","open","responseType","loader","decodeAudioData","response","buffer","length","alert","error","console","onerror","send","load","i","window","AudioContext","webkitAudioContext","setIntervalCancel","timeContext","finishedLoading","sound","a","async","undefined","metronomeClick","ended","queue","play","tempo","goal","incrementBy","incrementEvery","rawTempo","calculatedTempo","log","currentTime","incrementCompletion","setInterval","shift","source","createBufferSource","connect","destination","onended","start","push","cancel","node","clearInterval","stop","Metronome","props","state","isTesting","setState","Number","newGoalTempo","newIncrement","newIncrementEvery","stopMetronome","hidden","className","type","value","onChange","e","changeTempo","target","changeGoal","changeIncrementBy","changeIncrementEvery","onClick","incrementBy10","decrementBy10","React","Component","pitches","sounds","ToneGenerator","useState","pitch","setPitch","isPlaying","setIsPlaying","startSound","freq","oscillator","createOscillator","gain","createGain","frequency","makeSound","cancelSound","stopSound","pitchName","min","max","changePitch","App","practiceStack","addToPracticeStack","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ae063f66.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/metronome1.fd742d0f.flac\";","const BufferLoader = function(context, urlList, callback) {\n  this.context = context;\n  this.urlList = urlList;\n  this.onload = callback;\n  this.bufferList = [];\n  this.loadCount = 0;\n};\n\nBufferLoader.prototype.loadBuffer = function(url, index) {\n  // Load buffer asynchronously\n  var request = new XMLHttpRequest();\n  request.open('GET', url, true);\n  request.responseType = 'arraybuffer';\n\n  var loader = this;\n\n  request.onload = function() {\n    // Asynchronously decode the audio file data in request.response\n    loader.context.decodeAudioData(\n      request.response,\n      function(buffer) {\n        if (!buffer) {\n          alert('error decoding file data: ' + url);\n          return;\n        }\n        loader.bufferList[index] = buffer;\n        if (++loader.loadCount === loader.urlList.length)\n          loader.onload(loader.bufferList);\n      },\n      function(error) {\n        console.error('decodeAudioData error', error);\n      }\n    );\n  };\n\n  request.onerror = function() {\n    alert('BufferLoader: XHR error');\n  };\n\n  request.send();\n};\n\nBufferLoader.prototype.load = function() {\n  for (var i = 0; i < this.urlList.length; ++i)\n    this.loadBuffer(this.urlList[i], i);\n};\n\nexport default BufferLoader;\n","import metronomeClick from '../sounds/metronome1.flac';\nimport BufferLoader from './BufferLoader.js';\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet timeContext = new AudioContext();\nlet buffer;\n\nconst finishedLoading = bufferList => {\n  buffer = bufferList[0];\n};\n\nconst sound = async () => {\n  if (buffer === undefined) {\n    let bufferLoader = new BufferLoader(\n      timeContext,\n      [metronomeClick],\n      finishedLoading\n    );\n    bufferLoader.load();\n  }\n};\n\nlet ended = 0;\nlet queue = [];\nlet setIntervalCancel;\n\nconst play = (tempo, goal, incrementBy, incrementEvery, notTesting = false) => {\n  timeContext = new AudioContext();\n  sound();\n  let rawTempo = tempo;\n  let calculatedTempo = 60 / rawTempo;\n  console.log(timeContext);\n  let currentTime = timeContext.currentTime + 0.2;\n  let incrementCompletion = 0;\n  setIntervalCancel = setInterval(() => {\n    // clear out old gnomes from queue to save memory\n    for (let i = 0; i < ended; i++) {\n      queue.shift();\n    }\n    ended = 0;\n\n    if (queue.length < 21) {\n      // console.log(queue);\n      for (let i = 1; i < 21; i++) {\n        // update tempo if incrementing\n        if (incrementBy && incrementEvery && rawTempo < goal) {\n          if (incrementCompletion > incrementEvery) {\n            incrementCompletion = 0;\n            rawTempo += incrementBy;\n            if (rawTempo > goal) {\n              rawTempo = goal;\n            }\n            calculatedTempo = 60 / rawTempo;\n          }\n        }\n\n        // generate audio and push to queue\n        let source = timeContext.createBufferSource();\n        source.buffer = buffer;\n        source.connect(timeContext.destination);\n\n        // callback adds one more click to the list of elements to delete\n        // eslint-disable-next-line\n        source.onended = () => {\n          ended += 1;\n        };\n\n        // gotta push the clock ahead so that it doesn't just duplicate events\n        incrementCompletion += calculatedTempo;\n        currentTime += calculatedTempo;\n        // initiate sound and push to a place we can reference it\n        source.start(currentTime + calculatedTempo);\n        queue.push(source);\n      }\n    }\n  }, 200);\n};\n\nconst cancel = () => {\n  if (setIntervalCancel) {\n    clearInterval(setIntervalCancel);\n    for (let node in queue) {\n      queue[node].stop();\n    }\n    queue = [];\n  }\n};\n\nexport { play, cancel };\n","import React from 'react';\nimport { play, cancel } from './metronomeUtil.js';\n\nclass Metronome extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tempo: this.props.tempo || 60,\n      goal: this.props.goal || 60,\n      incrementBy: this.props.incrementBy || 0,\n      incrementEvery: this.props.incrementEvery || 0,\n      isTesting: false\n    };\n  }\n\n  changeTempo(tempo) {\n    if (tempo === '') {\n      this.setState({ tempo: 0 });\n    }\n    if (Number(tempo) && tempo > 9) {\n      this.setState({ tempo: tempo });\n    }\n  }\n  changeGoal(newGoalTempo) {\n    if (newGoalTempo === '') {\n      this.setState({ goal: 0 });\n    } else {\n      this.setState({ goal: newGoalTempo });\n    }\n  }\n  changeIncrementBy(newIncrement) {\n    cancel();\n    if (newIncrement === '') {\n      this.setState({ incrementBy: 0 });\n    } else {\n      this.setState({ incrementBy: newIncrement });\n    }\n  }\n  changeIncrementEvery(newIncrementEvery) {\n    cancel();\n    if (newIncrementEvery === '') {\n      this.setState({ incrementEvery: 0 });\n    } else {\n      this.setState({ incrementEvery: newIncrementEvery });\n    }\n  }\n\n  start() {\n    let { tempo, goal, incrementBy, incrementEvery } = this.state;\n    play(\n      Number(tempo),\n      Number(goal),\n      Number(incrementBy),\n      Number(incrementEvery)\n    );\n  }\n  stopMetronome() {\n    cancel();\n  }\n  incrementBy10() {\n    this.stopMetronome();\n    if (Number(this.state.tempo) && this.state.tempo > 10) {\n      this.setState({ tempo: this.state.tempo + 10 });\n      this.start();\n    }\n  }\n  decrementBy10() {\n    this.stopMetronome();\n    if (Number(this.state.tempo) && this.state.tempo > 10) {\n      this.setState({ tempo: this.state.tempo - 10 });\n      this.start();\n    }\n  }\n\n  render() {\n    if (!this.state.hidden) {\n      return (\n        <div className=\"module\">\n          <div className=\"background\">\n            <h1 className=\"moduleHeader\">Metronome</h1>\n            <ul className=\"moduleContents\">\n              <div className=\"moduleElement\">\n                Starting Tempo\n                <input\n                  type=\"text\"\n                  value={this.state.tempo}\n                  onChange={e => {\n                    this.changeTempo(e.target.value);\n                  }}\n                ></input>\n              </div>\n              <div className=\"moduleElement\">\n                Goal Tempo\n                <input\n                  type=\"text\"\n                  value={this.state.goal}\n                  onChange={e => {\n                    this.changeGoal(e.target.value);\n                  }}\n                ></input>\n              </div>\n              <div className=\"moduleElement\">\n                Increment by\n                <input\n                  type=\"text\"\n                  value={this.state.incrementBy}\n                  onChange={e => {\n                    this.changeIncrementBy(e.target.value);\n                  }}\n                ></input>\n              </div>\n              <div className=\"moduleElement\">\n                Every\n                <input\n                  type=\"text\"\n                  value={this.state.incrementEvery}\n                  onChange={e => {\n                    this.changeIncrementEvery(e.target.value);\n                  }}\n                ></input>\n              </div>\n            </ul>\n            <ul>\n              <div className=\"moduleElement\">\n                <button\n                  className=\"moduleButton\"\n                  onClick={() => this.incrementBy10()}\n                >\n                  +10bpm\n                </button>\n              </div>\n              <div className=\"moduleElement\">\n                <button\n                  className=\"moduleButton\"\n                  onClick={() => this.decrementBy10()}\n                >\n                  -10bpm\n                </button>\n              </div>\n              <button className=\"playMetronome\" onClick={() => this.start()}>\n                Start\n              </button>\n              <button\n                className=\"stopMetronome\"\n                onClick={() => this.stopMetronome()}\n              >\n                Stop\n              </button>\n            </ul>\n          </div>\n        </div>\n      );\n    } else {\n      return <></>;\n    }\n  }\n}\n\nexport default Metronome;\n","window.AudioContext = window.AudioContext || window.webkitAudioContext;\nconst context = new AudioContext();\nlet pitches = [\n  440,\n  466.16,\n  493.88,\n  523.25,\n  554.37,\n  587.33,\n  622.25,\n  659.25,\n  698.46,\n  739.99,\n  793.99,\n  830.61\n];\n\nlet sounds = [];\nconst makeSound = pitch => {\n  let freq = pitches[pitch - 1];\n  console.log(freq);\n  if (!sounds[0]) {\n    let oscillator = context.createOscillator();\n    let gain = context.createGain();\n    sounds.push(oscillator);\n    sounds.push(gain);\n\n    oscillator.type = 'sine';\n    oscillator.frequency.value = freq;\n\n    oscillator.connect(gain);\n    gain.connect(context.destination);\n\n    oscillator.start();\n    return pitch;\n  }\n};\n\nconst stopSound = () => {\n  console.log(sounds);\n  for (let sound in sounds) {\n    if (sound % 2 === 0) {\n      sounds[sound].stop();\n    }\n  }\n  sounds = [];\n};\nexport { makeSound, stopSound };\n","import React, { useState } from 'react';\nimport { makeSound, stopSound } from './Drone.js';\n\nconst ToneGenerator = () => {\n  const [pitch, setPitch] = useState(1);\n  let [isPlaying, setIsPlaying] = useState(false);\n\n  const changePitch = pitch => {\n    setPitch(pitch);\n    if (isPlaying) {\n      cancelSound();\n      startSound(pitch);\n    }\n  };\n  const startSound = pitch => {\n    makeSound(pitch);\n    setIsPlaying(true);\n  };\n  const cancelSound = () => {\n    stopSound();\n    setIsPlaying(false);\n  };\n\n  let pitchName = pitch => {\n    let names = [\n      'A',\n      'Bb',\n      'B',\n      'C',\n      'C#',\n      'D',\n      'D#',\n      'E',\n      'F',\n      'F#',\n      'G',\n      'G#'\n    ];\n    return names[pitch - 1];\n  };\n\n  return (\n    <div className=\"module\">\n      <div className=\"background\">\n        <h1 className=\"moduleHeader\">Drone Generator</h1>\n        <h2 className=\"pitchName\">Pitch: {pitchName(pitch)}</h2>\n        <ul className=\"moduleContents\">\n          <div className=\"moduleElement\">\n            <input\n              className=\"pitchSlider\"\n              type=\"range\"\n              min=\"1\"\n              max=\"12\"\n              value={pitch}\n              onChange={e => changePitch(e.target.value)}\n            ></input>\n          </div>\n          <div className=\"moduleElement\">\n            <button\n              className=\"moduleButton\"\n              onClick={() => {\n                startSound(pitch);\n              }}\n            >\n              Start\n            </button>\n          </div>\n          <div className=\"moduleElement\">\n            <button className=\"moduleButton\" onClick={() => cancelSound()}>\n              Stop\n            </button>\n          </div>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default ToneGenerator;\n","import React from 'react';\nimport './App.css';\nimport Metronome from './components/Metronome.jsx';\nimport ToneGenerator from './components/ToneGenerator.jsx';\nimport PracticeStack from './components/PracticeStack.jsx';\nimport AutoGnome from './components/AutoGnome.jsx';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      practiceStack: []\n    };\n    // this.addToPracticeStack = this.addToPracticeStack.bind(this);\n  }\n\n  // addToPracticeStack(tempo, goal, incrementBy, incrementEvery, howLong) {\n  //   this.state.practiceStack.push({\n  //     tempo,\n  //     goal,\n  //     incrementBy,\n  //     incrementEvery,\n  //     howLong\n  //   });\n  //   this.setState({ practiceStack: this.state.practiceStack });\n  // }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"header\">Auto Gnome</h1>\n        <div className=\"main\">\n          {/* <PracticeStack\n            className=\"practiceStackContainer\"\n            practiceStack={this.state.practiceStack}\n          /> */}\n          <div className=\"moduleContainer\">\n            <Metronome\n              addToPracticeStack={this.addToPracticeStack}\n              tempo={80}\n              goal={100}\n              incrementBy={5}\n              incrementEvery={10}\n            />\n            <div className=\"break\"></div>\n            <ToneGenerator />\n            {/* <AutoGnome practiceStack={this.state.practiceStack} /> */}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { play, cancel } from './metronomeUtil.js';\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst timeContext = new AudioContext();\n\nconst runGnomes = practiceStack => {\n  // check if array has multiple entries\n  if (Array.isArray(practiceStack) && practiceStack.length > 0) {\n    const { tempo, goal, incrementBy, incrementEvery } = practiceStack[0];\n\n    let currentTime = timeContext.currentTime + 0.2;\n    let source = timeContext.createOscillator();\n    let gain = timeContext.createGain();\n    gain.gain.value = 0;\n    source.connect(gain);\n    gain.connect(timeContext.destination);\n\n    source.onended = () => {\n      play(tempo, goal, incrementBy, incrementEvery);\n      cancelGnomeAndAdvance(practiceStack, practiceStack[0].howLong);\n    };\n    source.start(currentTime);\n    console.log(source);\n    source.stop(currentTime + 0.1);\n  }\n};\n\nconst cancelGnomeAndAdvance = (practiceStack, delay) => {\n  if (practiceStack.length >= 1) {\n    let currentTime = timeContext.currentTime + 0.2;\n    let source = timeContext.createOscillator();\n    let gain = timeContext.createGain();\n    gain.gain.value = 0;\n    source.connect(gain);\n    gain.connect(timeContext.destination);\n\n    source.onended = () => {\n      cancel();\n      if (practiceStack.length > 1) {\n        runGnomes(practiceStack.slice(1));\n      }\n    };\n\n    source.start(currentTime);\n    source.stop(delay);\n  }\n};\n\nconst AutoGnome = ({ practiceStack }) => {\n  return (\n    <div>\n      <button className=\"runGnomes\" onClick={() => runGnomes(practiceStack)}>\n        Run Gnomes\n      </button>\n      <button className=\"stopGnomes\" onClick={() => cancel()}>\n        STOP\n      </button>\n    </div>\n  );\n};\n\nexport default AutoGnome;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\nif (!window.webkitAudioContext) {\n  ReactDOM.render(<App />, document.getElementById('root'));\n} else {\n  ReactDOM.render(\n    <div>\n      Sorry, this browser isn't supported. You have to use Chrome for\n      AudioContext to work correctly!\n    </div>,\n    document.getElementById('root')\n  );\n}\n"],"sourceRoot":""}